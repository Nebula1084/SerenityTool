.ORIGIN 0x3600
			.2byte print		# print		0
			.2byte printstr   	# printstr	1
			.2byte putchar   	# putchar	2
			.2byte 0x4600	 	# getchar	3
			.2byte printint		# printint	4
			.2byte init_disk	# init_disk	5
			.2byte clear		# clear		6			
			.2byte sys_exec		#			7
#sys_exec:  @$a0			#exectable name
			.2byte dir			#			8
			.2byte fopen		#			9
			.2byte fread		#			10
            #$a0 length $a1 ptr to dest
			.2byte fwrite		#			11
            #$a0 length $a1 ptr to source
			.2byte fseek		#			12
			.2byte fclose		# 			13			
            .2byte printstr2    #           14

print:	#---------------------syscall print
			push	$a0				#$a0, character that would be printed
			push	$a1				#$a1, the offset to which the character would output
			
			addi	$a1, $a1, 0x3000
			sh		$a0, 0($a1)
			
			pop		$a1
			pop		$a0
			jr		$ra

# syscall $v0 = 0
# a0 ASCII of the char to be output	

printstr: #------------------------syscall printstr
			push	$a0, $a1, $t0, $t5, $t6, $t7
			
			addi	$a1, $a1, 0x3000	# the target address
			li		$t7, 0x000D	                # printstr_LINEFEED
			li		$t6, 41				# length of one line	
			move	$t5, $zero 			# counter		
			
printstr_LOOP:
			lh		$t0, 0($a0)			# get character
			addi	$t5, $t5, 1
			bne		$t5, $t6, printstr_GO_ON
			move	$t5, $zero
printstr_GO_ON:
			beq		$t0, $zero, printstr_EXIT
			beq		$t0, $t7, printstr_LINEFEED  
			sh		$t0, 0($a1)			# print
			addi	$a0, $a0, 1
			addi	$a1, $a1, 1			# move to next
			j		printstr_LOOP

printstr_LINEFEED:	
			sh		$zero, 0($a1)
			beq		$t5, $t6, printstr_EXITLF
			addi	$a1, $a1, 1
			addi	$t5, $t5, 1
			j 		printstr_LINEFEED
			
printstr_EXITLF:		
			addi	$a0, $a0, 1
			move	$t5, $zero	
			j		printstr_LOOP
		
printstr_EXIT:		
			sh		$zero, 0($a1)
			move	$t5, $zero
printstr_CLEARLOOP:  
			addi	$t5, $t5, 1
			addi	$a1, $a1, 1
			sh		$zero, 0($a1)
			bne		$t5, $t6, printstr_CLEARLOOP
			pop		$a0, $a1, $t0, $t5, $t6, $t7
			jr		$ra
		
# syscall $v0 = 1
# $a0 address of the string
# $a1 offset from the Video memory

putchar: #----------------------syscall putchar
			push	$a0				#$a0, character that would be printed
			push	$a1				#$a1, x
			push	$a2				#$a2, y
			push	$t0
			
			addi	$t0, $zero, 40  # width of the screen
			mul		$a1, $a1, $t0
			add		$a1, $a1, $a2
			addi	$a1, $a1, 0x3000
			sh		$a0, 0($a1)
			
			pop		$t0
			pop		$a2
			pop		$a1
			pop		$a0
			
			jr		$ra

# syscall $v0 = 2            
				
printint:	#------------------------syscall printint
#printINT
#a0 int
#a1 X
#a2 Y 

#s0 COUNT
#s1 MASK
#s2 Table
#s3 index
#syscall $v0 = 4
                push    $s0
                push    $s1
                push    $s2
                push    $s3
                push    $t0
                push    $a0
        
                li      $s0, 32
                li      $s1, 0x0000000F
                li      $t0, 40
                mul     $s3, $a1, $t0
                add     $s3, $s3, $a2
                addi    $s3, $s3, 0x3000
                la      $s2, printint_TABLE
                
printint_LOOP:
                addi    $s0, $s0, -4
                srlv    $t0, $a0, $s0
                and     $t0, $t0, $s1
                add     $t0, $t0, $t0
                add     $t0, $t0, $s2
                lw      $t0, 0($t0)
                sh      $t0, 0($s3)
                addi    $s3, $s3, 1
                beq     $s0, $zero, printint_END
                beq     $zero, $zero, printint_LOOP
printint_END:
                pop     $a0
                pop     $t0
                pop     $s3
                pop     $s2
                pop     $s1
                pop     $s0
                jr      $ra

printint_TABLE:
			.2Byte  0x30
			.2Byte  0x31
			.2Byte  0x32
			.2Byte  0x33
			.2Byte  0x34
			.2Byte  0x35
			.2Byte  0x36
			.2Byte  0x37
			.2Byte  0x38
			.2Byte  0x39
			.2Byte  0x41
			.2Byte  0x42
			.2Byte  0x43
			.2Byte  0x44
			.2Byte  0x45
			.2Byte  0x46
			
clear:	#------------------------------syscall clear
			push	$ra
			push	$v0
			push	$a0
			push	$a1
			push	$a2
			push	$t1
			push	$t2
			
			li		$a0, 0x0
			li		$v0, 2
			li		$t1, 25		# height of the screen
			li		$t2, 40		# width of the screen
			
clear_LOOP:		
			jal		putchar
			addi	$a2, $a2, 1
			bne		$a2, $t2, clear_LOOP
			addi	$a1, $a1, 1
			beq		$a1, $t1, clear_exit
			move	$a2, $zero			
			j		clear_LOOP
			
clear_exit:		
			pop		$t2
			pop		$t1
			pop		$a2
			pop		$a1
			pop		$a0
			pop		$v0
			pop		$ra
			
			jr		$ra
			
sys_exec:
# @ a0:exectable name
        push	$v0
        push    $v1
        push	$a0
        push	$a1
		push	$a2
        push    $a3
        push    $t0
        push    $t1
        push    $t2
        push    $t3
        push    $t4
        push    $t5
        push    $t6
        push    $t7
        push    $s0
        push    $s1
        push    $s2
        push    $s3
        push    $s4
        push    $s5
        push    $s6
        push    $s7
        push    $t8
        push    $t9        
		push	$ra					#37fa		
		
        la      $t0, EXE_TOP
        lw      $s0, 0x0($t0)
        
		jal		fopen		
		beq		$v0, $zero, l1		#if file open success
		
		la		$a0, F_LENGTH        
		lw		$a0, 0x0($a0)         #$a0 current exectable length
        add     $t1, $s0, $a0       # EXE_TOP = EXE_TOP + F_LENGTH
        sw      $t1, 0x0($t0)
        push    $a0                 #push F_LENGTH
		srl		$a0, $a0, 1
        move    $a1, $s0
		jal		fread        #3826
		
		jal		fclose					
		
l1:		move	$a0, $v0				
		li		$a1, 0
		li		$a2, 0
		
		jal		printint
		
		move	$a1, $zero
		move	$a2, $zero
		jal		clear

		push	$gp
        addi    $gp, $s0, 2		
        addi    $a0, $s0, 2		
		jalr	$a0, $ra
		pop		$gp
        
        pop     $a0             # pop F_LENGTH
        lw      $s0, 0x0($t0)
        sub     $t1, $s0, $a0   # EXE_TOP = EXE_TOP - F_LENGTH
        sw      $t1, 0x0($t0)   
        
        pop     $ra
        pop     $t9
        pop     $t8
        pop     $s7
        pop     $s6
        pop     $s5
        pop     $s4
        pop     $s3
        pop     $s2
        pop     $s1
        pop     $s0
        pop     $t7
        pop     $t6
        pop     $t5
        pop     $t4
        pop     $t3
        pop     $t2
        pop     $t1
        pop     $t0
        pop     $a3
        pop     $a2
        pop     $a1
        pop     $a0
        pop     $v1
        pop     $v0    

		jr		$ra
        
EXE_TOP:
        .2byte  0x300

init_disk:
		push	$s0
		push	$a0
		push	$a1
		push	$a2
		push	$v1
		push	$v0
		push	$t0
		push	$ra
		push	$t1
		push	$t2
		push	$t3
		push	$t4

		#load 0 sector
		li		$a0, 0x000000FF
		jal		load_sector		#initialization
		li		$a0, 0x0
		jal		load_sector

		li		$t0, 0x5100
		
		lw		$a0, 0xE3($t0)			#Sectors preceding partition 1				
		jal		rever
		la		$t1, psec
		sw		$v0, 0x0($t1)
		

		lw		$a0, 0xE5($t0)			#length of partition 1 in sector
		jal		rever
		la		$t1, plen
		sw		$v0, 0x0($t1)

		#load BPB of first partition
		la		$t1, psec
		lw		$t1, 0x0($t1)
		move	$a0, $t1
		jal		load_sector	
						
		
		#bytes per sector(pbps)
		li		$t0, 0x5100
		lw		$t1, 0x5($t0)	
		sll		$a0, $t1, 8				#only two, I move it to the end of word
		li		$t2, 0xFFFF0000
		and 	$a0, $a0, $t2				
		jal		rever
		move	$a0, $v0
		la		$t1, pbps
		sw		$a0, 0x0($t1)			#pbps = $a0
		
		#sector per cluster(pspc)
		lw		$t1, 0x6($t0)
		move	$a0, $t1
		srl		$a0, $a0, 16
		andi	$a0, $a0, 0x0F
		la		$t1, pspc
		sw		$a0, 0x0($t1)		#pspc
		
		push	$a1
		push	$a2
		push	$v0
		
		pop		$a2
		pop		$a1
		pop		$v0
		
		#reserved sector(prs)
		lw		$t1, 0x7($t0)
		move	$a0, $t1
		jal		rever
		andi	$a0, $v0, 0xFF
		la		$t1, prs
		sw		$a0, 0x0($t1)		#prs
		
		#number of fat
		lw		$t1, 0x8($t0)
		move	$a0, $t1
		jal		rever
		andi	$a0, $v0, 0xFF
		la		$t1, nof
		sw		$a0, 0x0($t1)		#nof
				
		
		#sector per fat
		lw		$t1, 0xb($t0)		
		move	$a0, $t1
		jal		rever
		andi	$a0, $v0, 0xFF
		la		$t1, pspf
		sw		$a0, 0x0($t1)		#pspf

		#hidden sector
		lw		$t1, 0xe($t0)
		move	$a0, $t1
		jal		rever
		move	$a0, $v0
				
		la		$t0, psec
		lw		$t1, 0x0($t0)		#$t1=psec
		la		$t0, prs
		lw		$t2, 0x0($t0)		#$t2=prs
		la		$t0, nof
		lw		$t3, 0x0($t0)		#$t3=nof
		la		$t0, pspf
		lw		$t4, 0x0($t0)		#$t4=pspf			
		
		#load FAT sector
		add		$t0, $t1, $t2		#$a0=psec+prs FAT = psec+prs
		move	$a0, $t0
        
        la      $s0, FAT_sector
        sw      $a0, 0x0($s0)
		
		jal		load_sector
		li		$a0, 0x3400
		jal 	mosec				#move fat sector to 0x3400
		
		mul		$t3, $t3, $t4
		add		$t0, $t0, $t3
		move	$a0, $t0			#$a0=psec+prs+nof*pspf
		
		la		$s0, DIR_sector
		sw		$a0, 0x0($s0)
		
		#load DIR sector
		jal		load_sector
		li		$a0, 0x3500
		jal		mosec
		
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$ra
		pop		$t0
		pop		$v0
		pop		$v1
		pop		$a2
		pop		$a1
		pop		$a0
		pop		$s0
		jr		$ra
		
#load sector
load_sector:
#$a0, number of specifed sector that need to be loaded
		push	$a0
		push	$s0
		
		sw		$a0, 0x50FC($zero)
		addi	$s0, $zero, 1
		sh		$s0, 0x50FE($zero)
SUS_L:	lh		$s0, 0x50FF($zero)
		beq		$s0, $zero, SUS_L
		
		la		$s0, SYS_SEC_BUF
		sw		$a0, 0x0($s0)
		
		pop		$a0
		pop		$s0
		jr		$ra
		
dump_sector:
#$a0, number of specifed sector that need to be loaded
		push	$a0
		push	$s0
		
		sw		$a0, 0x50FC($zero)
		addi	$s0, $zero, 2
		sh		$s0, 0x50FE($zero)
SUS_D:	lh		$s0, 0x50FF($zero)
		beq		$s0, $zero, SUS_L	
        
        la		$s0, SYS_SEC_BUF
		sw		$a0, 0x0($s0)			
		
		pop		$s0
		pop		$a0
		jr		$ra

#reverse the little-endian data
#$a0 -> $v0
rever:	push	$a0
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$ra
		
		andi	$t0, $a0, 0xFF
		srl		$t1, $a0, 8
		andi	$t1, $t1, 0xFF
		srl		$t2, $a0, 16
		andi	$t2, $t2, 0xFF
		srl		$t3, $a0, 24
		andi 	$t3, $t3, 0xFF
		sll		$v0, $t0, 24
		sll		$t1, $t1, 16
		sll		$t2, $t2, 8
		add		$v0, $v0, $t1
		add		$v0, $v0, $t2
		add		$v0, $v0, $t3

		pop		$ra
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop		$a0
		jr		$ra

DIR_sector:
		.2byte	0x0
FAT_sector:
        .2byte  0x0
psec:	.2byte	0x0
plen:	.2byte	0x0
pbps:	.2byte	0x0
#sector per cluster
pspc:	.2byte	0x0
prs:	.2byte	0x0
nof:	.2byte	0x0
pspf:	.2byte	0x0

#move sector
# $a0 destination
mosec:	push	$a0
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		push	$ra
		
		li 		$t0, 0x5100
		move	$t1, $a0
		li		$t2, 0x100
		move	$t3, $zero

mv:		lw		$t4, 0($t0)		# for (i=0; i<100; i++)
		sw		$t4, 0($t1)		#	s[$t1]=s[$t0]
		addi	$t0, $t0, 1
		addi	$t1, $t1, 1
		addi	$t2, $t2, -1
		bne		$t2, $zero, mv
		
		pop		$ra
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop 	$a0
		
		jr		$ra
        
motosec:
# $a0 source
        push	$a0
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		push	$ra
		
		li 		$t0, 0x5100
		move	$t1, $a0
		li		$t2, 0x100
		move	$t3, $zero

moto_mv:		
        lw		$t4, 0($t1)		# for (i=0; i<100; i++)
		sw		$t4, 0($t0)		#	s[$t1]=s[$t0]
		addi	$t0, $t0, 1
		addi	$t1, $t1, 1
		addi	$t2, $t2, -1
		bne		$t2, $zero, moto_mv
		
		pop		$ra
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop 	$a0
		
		jr		$ra

#------------dir command-------------------	
dir:	push	$ra
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		push	$t5
		push	$a2
		push	$a1
		push	$a0				
		push	$v0
		push	$s0
		push	$s1

		li		$t0, 0x3500
		move	$t1, $zero
		li		$t2, 16
s_dir:	mul		$t3, $t1, $t2		#while(dir[0]!=0)
		add		$t4, $t3, $t0
		
		lw		$t5, 0x0($t4)
		beq		$t5, $zero, s_fin
		move	$a0, $t5
		move	$a1, $t1			#$a1 line number
		li		$a2, 0
		li		$v0, 4
				
		addi	$t5, $t4, 5			#property
		lh		$t5, 0x0($t5)		#$t5 P
		
		addi	$t1, $t1, 1			#initial cluster
		addi	$t6, $t4, 13		#$t6 I
		lh		$t6, 0x0($t6)

		andi	$t5, $t5, 0xFF
		li		$s0, 0x20			# if( P&0xFF != | I == 0 ) continue
		bne		$t5, $s0, s_dir
		beq		$t6, $zero, s_dir	
		move	$a3, $t4
		jal		p_n
		j		s_dir
s_fin:	
		pop		$s1
		pop		$s0
		pop		$v0
		pop		$a0
		pop		$a1
		pop		$a2
		pop		$t5
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop		$ra
		jr		$ra

#-----------print name------------------
p_n:	
		push	$a0
		push	$a1
		push	$ra
		push	$a2
		push	$a3
		push	$v0
		push	$t0
		push	$t1
		push	$t2
		push	$s0
		push	$s1
		push	$s3
		push	$s4
		
		move	$s4, $a1			#line number
		li		$s3, 0x20
		la		$t1, ln				#dest
		move	$t2, $a3			#source
f_nam:	lh		$t0, 0x0($t2)
		srl		$s1, $t0, 8			#high 8 bit
		beq		$s1, $s3, f_ext		#if ($s1==' ') break;		
		sh		$s1, 0x0($t1)
		addi	$t1, $t1, 1
		andi	$s2, $t0, 0x0FF		#low 8 bit
		
		beq		$s2, $s3, f_ext		#if ($s1==' ') break;
		sh		$s2, 0x0($t1)
		addi	$t1, $t1, 1	
		addi	$t2, $t2, 1
			 		
		j		f_nam

f_ext:	li		$s0, 0x2E
		sh		$s0, 0x0($t1)
		addi	$t1, $t1, 1
		sh		$zero, 0x0($t1)
		
		addi	$t2, $a3, 4
		
		lh		$t0, 0x0($t2)
		srl		$s1, $t0, 8			#high 8 bit
		beq		$s1, $s3, f_p		#if ($s1==' ') break;		
		sh		$s1, 0x0($t1)
		addi	$t1, $t1, 1
		andi	$s2, $t0, 0x0FF		#low 8 bit		
		beq		$s2, $s3, f_p		#if ($s1==' ') break;
		sh		$s2, 0x0($t1)
		addi	$t1, $t1, 1	
		addi	$t2, $t2, 1

		lh		$t0, 0x0($t2)
		srl		$s1, $t0, 8			#high 8 bit
		beq		$s1, $s3, f_p		#if ($s1==' ') break;		
		sh		$s1, 0x0($t1)
		addi	$t1, $t1, 1
		sh		$zero, 0x0($t1)


f_p:	la		$a0, ln
		li		$a2, 40
		mul		$a1, $a2, $s4
		jal		printstr
			
		pop		$s4
		pop		$s3		
		pop		$s1
		pop		$s0
		pop		$t2
		pop		$t1
		pop		$t0
		pop		$v0
		pop		$a3
		pop		$a2
		pop		$ra
		pop		$a1
		pop		$a0
		
		jr		$ra

ln:		.asciiz	"12345678.123"

lt:		.asciiz	"12345678.123"

#-------------------fopen------------------
fopen:
#	$a0, pointer to input string
#	$v0, return value which indicate whether open operation success or not
#			@success: 1		@error: 0

		push	$a0
		push	$a1
		push	$a2
		push	$ra
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		push	$t5
		push	$t6
		push	$s0
		push	$s1

		move	$s1, $a0				#file name

		la		$t0, F_OPEN
		lw		$t1, 0x0($t0)			#check whether file pointer has been initialized
		beq		$t1, $zero, open_file	#if file hasn't been opened
		move	$v0, $zero
		j		open_exit

open_file:
		jal     find_file
        move    $t4, $v0                #head of a directory entry
        la      $s0, F_ITEM
        sw      $t4, 0x0($s0)
        move    $t6, $v1                #initial cluster    0x3da6
        bne     $t6, $zero, file_exist
#------------not exists--------------
file_not_exist:
        li      $t1, 6
        move    $t2, $a0                #ptr to file name
		move    $t3, $t4                #head of entry
#file name
create_name:
        lh      $s0, 0x0($t2)
        lh      $s1, 0x1($t2)
        sll     $s0, $s0, 8
        add     $s0, $s0, $s1
        sh      $s0, 0x0($t3)
        addi    $t2, $t2, 2
        addi    $t3, $t3, 1
        addi    $t1, $t1, -1
        bne     $t1, $zero, create_name
#file property 0x3dc4
        lh      $s0, 0x5($t4)
        li      $t1, 0xFFFFFF00
        and     $s0, $s0, $t1
        ori     $s0, $s0, 0x20
        sh      $s0, 0x5($t4)
#initial cluster    
        jal     find_fat
        move    $a0, $v0        
        jal     rever       #3de0
        srl     $s0, $v0, 16                        
        sh      $s0, 13($t4)
        li      $t6, 0xFFFF
        sh      $t6, 0x3400($a0)
        move    $t6, $s0
        sw      $zero, 14($t4)        
        la      $a0, SYS_SEC_BUF
        lw      $a0, 0x0($a0)
        jal     dump_sector
        
        li      $a0, 0x3400     #3e08
        jal     motosec
        la      $a0, FAT_sector
        lw      $a0, 0x0($a0)        
        jal     dump_sector
        
        li      $a0, 0x3500
        jal     motosec
        la      $a0, DIR_sector
        lw      $a0, 0x0($a0)
        jal     dump_sector
                
        
#-----------exists----------
file_exist:
		la		$a0, F_OPEN
		li		$a1, 1
		sw		$a1, 0x0($a0)

		la		$a0, F_OFFSET		#$a0 = F_OFFSET
		sw		$zero, 0x0($a0)

		sll		$t6, $t6, 16
		move	$a0, $t6
		
		jal		rever				#change I which is initial cluster to big-endian
		move	$t6, $v0
		
		la		$a0, F_INCLT
		sw		$t6, 0x0($a0)
		
		addi	$t6, $t4, 14
		lw		$a0, 0x0($t6)		#extract file length
		jal		rever
		
		la		$a0, F_LENGTH		
		sw		$v0, 0x0($a0)				
		
		la		$a0, F_INCLT
		lw		$a0, 0x0($a0)
		jal		cal_ini_cluster_sector				
		
		move	$a0, $v0     #3e92
		jal		load_sector
		
		li		$v0, 1
open_exit:
				
		pop		$s1
		pop		$s0
		pop		$t6
		pop		$t5
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop		$ra
		pop		$a2
		pop		$a1
		pop		$a0
		
		jr		$ra
		
F_OPEN:			.2byte	0x0
F_NAME:			.asciiz "12345678123"
F_OFFSET:		.2byte	0x0
F_LENGTH:		.2byte	0x0
F_INCLT:		.2byte	0x0
SYS_SEC_BUF:	.2byte	0x0
F_ITEM:         .2byte  0x0
tmp_name:		.asciiz "12345678123"

#---------find file----------------
find_file:
# $a0: pointer to file name
#@return $v0: file line number $v1:initial cluster
        push    $ra
        push    $t0
        push    $t1
        push    $t2
        push    $t3
        push    $t4
        push    $t5
        push    $a0
        push    $a1
        push    $a2
        push    $s1
        
        move    $s1, $a0
		li		$t0, 0x3500
		move	$t1, $zero
		li		$t2, 16
find_dir:	
        mul		$t3, $t1, $t2		#while(dir[0]!=0)
		add		$t4, $t3, $t0		#$t4 head of each line
		
		lw		$t5, 0x0($t4)
		beq		$t5, $zero, find_not_exist
		move	$a0, $t5
		move	$a1, $t1			#$a1 line number
		li		$a2, 0
		li		$v0, 4
		
		addi	$t5, $t4, 5			#property
		lh		$t5, 0x0($t5)		#$t5 P
		
		addi	$t1, $t1, 1			#initial cluster
		addi	$t6, $t4, 13		#$t6 I
		lh		$t6, 0x0($t6)
		
		andi	$t5, $t5, 0xFF
		li		$s0, 0x20			# if( P&0xFF != | I == 0 ) continue
		bne		$t5, $s0, find_dir
		beq		$t6, $zero, find_dir
		
		move	$a0, $t4
		la		$a1, tmp_name
		jal		split_str
		
		move	$a0, $s1				
		jal		comp_str			#check whether the file exists
		beq		$v0, $zero, find_dir
		beq		$zero, $zero, find_exist
		j		find_dir

find_exist:
        move    $v0, $t4
        move    $v1, $t6        
        beq     $zero, $zero, find_exit
find_not_exist:        
        move    $v0, $t4
        move    $v1, $zero
find_exit:
        pop     $s1
        pop     $a2
        pop     $a1
        pop     $a0
        pop     $t5
        pop     $t4
        pop     $t3
        pop     $t2
        pop     $t1
        pop     $t0
        pop     $ra

        jr      $ra

split_str:
#	$a0, source which is a file name in 8.3 format
#	$a1, dest

		push	$ra
		push	$t1
		push	$t2
		push	$t3
		push	$t0
		push	$s0
		push	$s1
		push	$s2
		
		move	$t1, $a1				#dest
		move	$t2, $a0				#source
		li		$t3, 4
split_nam:		
		lh		$t0, 0x0($t2)
		srl		$s1, $t0, 8			#high 8 bit				
		sh		$s1, 0x0($t1)
		addi	$t1, $t1, 1
		andi	$s2, $t0, 0x0FF		#low 8 bit		
		sh		$s2, 0x0($t1)
		addi	$t1, $t1, 1	
		addi	$t2, $t2, 1
		addi	$t3, $t3, -1
		bne		$t3, $zero, split_nam			 				

split_ext:									
		lh		$t0, 0x0($t2)
		srl		$s1, $t0, 8			#high 8 bit		
		sh		$s1, 0x0($t1)
		addi	$t1, $t1, 1
		andi	$s2, $t0, 0x0FF		#low 8 bit				
		sh		$s2, 0x0($t1)
		addi	$t1, $t1, 1	
		addi	$t2, $t2, 1

		lh		$t0, 0x0($t2)
		srl		$s1, $t0, 8			#high 8 bit				
		sh		$s1, 0x0($t1)
		addi	$t1, $t1, 1
		sh		$zero, 0x0($t1)
		
		pop		$s2
		pop		$s1
		pop		$s0
		pop		$t0
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$ra
		
		jr		$ra

comp_str:
#	$a0, pointer to first string waiting to be compared
#	$a1, pointer to second string waiting to be compared
#	$v0, return value that indicate whether two string are same or not
#		@match: 1		@not match: 0
		push	$ra
		push	$a0
		push	$a1
		push	$t0
		push	$t1
		
		move	$v0, $zero
cmp_loop:	
		lh		$t0, 0x0($a0)
		lh		$t1, 0x0($a1)
		
		bne		$t0, $t1, cmp_over		#check whether two byte is equal or name
		beq		$t0, $zero, cmp_finish	#finish when attain zero
		beq		$t1, $zero, cmp_finish
		addi	$a0, $a0, 1
		addi	$a1, $a1, 1
		
		j		cmp_loop
		
cmp_finish:
		li		$v0, 1
cmp_over:		
		pop		$t1
		pop		$t0
		pop		$a1
		pop		$a0
		pop		$ra
		
		jr		$ra

fseek:	push	$ra
		pop		$ra

fread:
		push	$a0						#read bytes number
		push	$a1						#destination, pdest
		push	$ra
		push	$t0
		push	$t1
		push	$t2
		push	$t3						#OFFSET
		push	$t4
		push	$s0
		push	$s1
		push	$s2		
		
		move	$s2, $a0			#$s2, byte number that need to be read, C 4070
		la		$t0, F_OPEN
		lw		$t1, 0x0($t0)				#check whether file pointer has been initialized
		bne		$t1, $zero, f_read			#if file hasn't been opened
		li		$v0, 0xFFFFFFFF
		jd		fread_32_exit
f_read:
		la		$t0, F_OFFSET
		move	$t4, $t0		
		lw		$t0, 0x0($t0)
		move	$t1, $t0
		move	$t3, $t0
		srl		$t0, $t0, 8			# current sector
		andi	$t1, $t1, 0xFF		# sector offset				
		
		move	$a0, $t0 #40c4
		jal		next_cluster
		
		move	$a0, $v0         #409c
		jal		cal_ini_cluster_sector		
				
		add		$t0, $zero, $v0
			
		la		$t2, SYS_SEC_BUF
		lw		$t2, 0x0($t2)
#----whether current sector need to be swapped 40dc
		beq		$t0, $t2, no_need_swap
need_swap:
		move	$a0, $t2
		jal		dump_sector      #4186
		move	$a0, $t0
		jal		load_sector		
no_need_swap:
		beq		$s2, $zero, fread_32_exit
		lw		$v0, 0x5100($t1)
		sw		$v0, 0x0($a1)			#move data to *pdest
		addi	$s2, $s2, -2			#C--
		addi	$a1, $a1, 2				#pdest++
		addi	$t1, $t1, 2				#offset++
		addi	$t3, $t3, 2				#OFFSET++
		li		$t2, 256
		bne		$t1, $t2, fread_L1		#if offset == 256 410a
		sw		$t3, 0x0($t4)			#save OFFSET
		beq		$zero, $zero, f_read
fread_L1:								
		beq		$zero, $zero, no_need_swap
fread_32_exit:
        la      $t4, F_LENGTH
        lw      $t5, 0x0($t4)
        add     $t3, $t3, $t3
        ble     $t3, $t5, fread_end
        sw      $t3, 0x0($t4)
fread_end:
		pop		$s2
		pop		$s1
		pop		$s0
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop		$ra
		pop		$a1
		pop		$a0
		jr		$ra
		
cal_ini_cluster_sector:
#$a0: dest cluster
#$v0: initial cluster for file
		push	$ra  #411c
		push	$s0
		push	$s1
		push	$s2
		
		la		$s0, DIR_sector
		lw		$s0, 0x0($s0)		#$s0 = DIR +32
		addi	$s0, $s0, 32
		move	$s1, $a0
		addi	$s1, $s1, -2		#s1 = dest cluster-2
		la		$s2, pspc
		lw		$s2, 0x0($s2)
		mul		$s1, $s1, $s2
		add		$v0, $s0, $s1		#DIR+32+(dest cluster-2)*sector per cluster
		
		pop		$s2
		pop		$s1
		pop		$s0
		pop		$ra
		jr		$ra
		
next_cluster:
#$a0: dest cluster 4158
#0x3400 fat table
		push	$ra
		push	$a0
		push	$a1
		push	$a2		
		push	$t0
		push	$t1
        push    $t2
		push	$s0
		push	$s1					#count
        push    $s2                 #EOF

		move	$s1, $a0

		la		$t0, F_INCLT		#$t0, initial cluster
		lw		$t0, 0x0($t0)
		la		$t1, pspc			#$t1, sector per cluster
		lw		$t1, 0x0($t1)
        
        li      $s2, 0xFFF8
				
nxt_clt_loop:
		ble		$s1, $zero, nxt_clt_exit
        blt     $t0, $s2, nxt_read  #if file is eof
        
		jal     find_fat            #allocate new fat entry
        sw      $v0, 0x3400($t2)
        sw      $t0, 0x3400($v0)
        
nxt_read:        
        lh		$s0, 0x3400($t0)	# $S0=CLUSTER[$T0]                        
		sll		$a0, $s0, 16
		jal		rever
		sub		$s1, $s1, $t1
        move    $t2, $t0        #41e8
		move	$t0, $v0
		beq		$zero, $zero, nxt_clt_loop		
nxt_clt_exit:		
		move	$v0, $t0
		
        pop     $s2
		pop		$s1
		pop		$s0
        pop     $t2
		pop		$t1
		pop		$t0
		pop		$a2
		pop		$a1
		pop		$a0								
		pop		$ra
		
		jr		$ra

#find unocupied fat entry
find_fat:
# @return: $v0 fat entry
        push    $ra
        push    $t0
        push    $t1
        
        move    $t0, $zero
find_loop:        
        lh      $t1, 0x3400($t0)
        beq     $t1, $zero, find_return
        addi    $t0, $t0, 1
        beq     $zero, $zero, find_loop
find_return:
        move    $v0, $t0
        
        pop     $t1
        pop     $t0
        pop     $ra
        jr      $ra
		
fwrite:	#syscall-------------------------------fwrite
#$a0 length $a1 ptr to memory that would be dumped  
        push	$ra
        push    $a0                 #write bytes number
        push    $a1                 #source, psrc
        push    $s1
        push    $s2
        push    $t0
        push    $t1
        
        move    $s2, $a0                    #$s2, byte number that need to be written, C
        la      $t0, F_OPEN
        lw      $t1, 0x0($t0)
        bne     $t1, $zero, fwrite_loop     #if file hasn't been opened
        li      $v0, 0xFFFFFFFF             # return -1
        jd      fwrite_exit
fwrite_loop:
        la      $t0, F_OFFSET
        move    $t4, $t0
        lw      $t0, 0x0($t0)
        move    $t1, $t0
        move    $t3, $t0
        srl     $t0, $t0, 9                 # current sector
        andi    $t1, $t1, 0xFF              # sector offset 4250
        
        move    $a0, $t0
        jal     next_cluster
        
        move    $a0, $v0
        jal     cal_ini_cluster_sector      #411c
        
        add     $t0, $zero, $v0             # 
        
		la		$t2, SYS_SEC_BUF
		lw		$t2, 0x0($t2)
#----whether current sector need to be swapped
		beq		$t0, $t2, fwrite_no_need_swap
fwrite_need_swap:
		move	$a0, $t2
		jal		dump_sector
		move	$a0, $t0
		jal		load_sector		
fwrite_no_need_swap:    
		beq		$s2, $zero, fwrite_exit   #4286
		lw		$v0, 0x0($a1)
		sw		$v0, 0x5100($t1)			#move data to sector
		addi	$s2, $s2, -2			#C--
		addi	$a1, $a1, 2				#psrc++
		addi	$t1, $t1, 2				#offset++
		addi	$t3, $t3, 2				#OFFSET++
		li		$t2, 256
		bne		$t1, $t2, fwrite_L1		#if offset == 256   
		sw		$t3, 0x0($t4)			#save OFFSET
		beq		$zero, $zero, fwrite_loop
fwrite_L1:								
		beq		$zero, $zero, fwrite_no_need_swap    #429c
fwrite_exit:
        la      $t4, F_LENGTH
        lw      $t5, 0x0($t4)
        add     $t3, $t3, $t3
        ble     $t3, $t5, fwrite_end #42a6
        sw      $t3, 0x0($t4)
fwrite_end:
        pop     $t1
        pop     $t0       
        pop     $s2
        pop     $s1
        pop     $a1
        pop     $a0
		pop		$ra
		jr		$ra

fclose:	push	$ra    
        push    $a0
		push	$t1
		push	$t2
        push    $t3
        push    $t4
		push    $s0
        push    $s1
        
		la		$a0, SYS_SEC_BUF  #42ec
		lw		$a0, 0x0($a0)
		jal		dump_sector
        
        la      $s0, F_ITEM
        lw      $t3, 0x0($s0)       #head of current file
        
        la      $s1, F_LENGTH
        lw      $t4, 0x0($s1)       #length
        move    $a0, $t4
        jal     rever
        sw      $v0, 14($t3)
        
        li      $a0, 0x3500         #materialize the change
        jal     motosec
        la      $a0, DIR_sector
        lw      $a0, 0x0($a0)        
        jal     dump_sector                
        
		la		$t1, F_OPEN
		sw		$zero, 0x0($t1)   #433a
		
        pop     $s1
        pop     $s0
        pop     $t4
        pop     $t3
		pop		$t2
		pop		$t1
        pop     $a0
		pop		$ra
		jr		$ra
        
printstr2:                    
			push	$a0, $a1, $t0		
			
printstr2_LOOP:		
            lh		$t0, 0($a0)
			beq		$t0, $zero, printstr2_EXIT
			sh		$t0, 0x3000($a1)
			addi	$a0, $a0, 1
			addi	$a1, $a1, 1
			j		printstr2_LOOP
			
printstr2_EXIT:		
            pop		$a0, $a1, $t0
			jr		$ra	