.ORIGIN 0x0
		mfc0	$t0, $c2
		li		$t2, 0xFFFFFFFE
		and		$t0, $t0, $t2
		mtc0	$t0, $c2			#disable interrupt
				
		addi	$sp, $zero, 0x2FFE 	#initial the stack pointer
		move	$gp, $zero
		
		#load 0 sector
		li		$a0, 0x000000FF
		jal		load_sector		#initialization
		
		li		$t0, 0x36		#memory address	i
		li		$t1, 0x100		#0x3600 ~ 0x5000
		
		li		$s0, 130		#sector j
		li		$s1, 0x19		#36 ~ 50		

boot_loop:
		move	$a0, $s0	#load sector[j]
		jal		load_sector
		mul		$a0, $t0, $t1		
		jal		mosec			# mem[i*100] = sector[j]
		addi	$s0, $s0, 1
		addi	$t0, $t0, 1
		beq		$s1, $zero, boot_finish
		addi	$s1, $s1, -1
		jd		boot_loop

boot_finish:
		mfc0	$t0, $c2		
		ori		$t0, $t0, 0x1
		mtc0	$t0, $c2			#enable interrupt
		
		li		$v0, 5
		syscall

		li		$v0, 8
		syscall
		la		$a0, open_name
		li		$v0, 7
		syscall
		
		la		$a0, THIS_BOOT
		li		$a1, 2
		li		$v0, 1
		syscall
		
		
exit:	beq $zero, $zero, exit
		.2byte	exit	
open_name:
		.asciiz "SHELL   BIT"
THIS_BOOT:
		.asciiz "this is boot!"

#load sector
load_sector:
#$a0, number of specifed sector that need to be loaded
		push	$a0
		push	$s0
		
		sw		$a0, 0x50FC($zero)
		addi	$s0, $zero, 1
		sh		$s0, 0x50FE($zero)
SUS_L:	lh		$s0, 0x50FF($zero)
		beq		$s0, $zero, SUS_L				
		
		pop		$a0
		pop		$s0
		jr		$ra
		
#move sector
#$a0: destination
mosec:	push	$a0
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		push	$ra
		
		li 		$t0, 0x5100
		move	$t1, $a0
		li		$t2, 0xFF
		move	$t3, $zero

mv:		lw		$t4, 0($t0)		# for (i=0; i<100; i++)
		sw		$t4, 0($t1)		#	s[$t1]=s[$t0]
		addi	$t0, $t0, 1
		addi	$t1, $t1, 1
		addi	$t2, $t2, -1
		bne		$t2, $zero, mv
		
		pop		$ra
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop 	$a0
		
		jr		$ra