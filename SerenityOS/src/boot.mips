.ORIGIN 0x0
		addi	$sp, $zero, 0x2FFE #initial the stack pointer
		move	$gp, $zero

		jal 	init_disk
		
		li		$v0, 4
		li		$a0, 0x61
		li		$a1, 0
		li		$a2, 0
#		syscall
		
exit:	beq $zero, $zero, exit
		.2byte	exit
		
init_disk:
		push	$s0
		push	$a0
		push	$a1
		push	$a2
		push	$v1
		push	$v0
		push	$t0
		push	$ra
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		
		#load 0 sector
		sw		$zero, 0x50FC($zero)
		addi	$s0, $zero, 2
		sh		$s0, 0x50FE($zero)
SUS1:	lh		$s0, 0x50FF($zero)
		beq		$s0, $zero, SUS1
		
		li		$t0, 0x5100
		
		lw		$a0, 0xE3($t0)			#Sectors preceding partition 1				
		jal		rever
		la		$t1, psec
		sw		$v0, 0x0($t1)
		
		lw		$a0, 0xE5($t0)			#length of partition 1 in sector
		jal		rever
		la		$t1, plen
		sw		$v0, 0x0($t1)

		#load BPB of first partition
		la		$t1, psec
		lw		$t1, 0x0($t1)
		sw		$t1, 0x50FC($zero)
		li		$s0, 2
		sh		$s0, 0x50FE($zero)
SUS2:	lh		$s0, 0x50FF($zero)	#suspand
		beq		$s0, $zero, SUS2		
				
		
		#bytes per sector(pbps)
		li		$t0, 0x5100
		lw		$t1, 0x5($t0)	
		sll		$a0, $t1, 8				#only two, I move it to the end of word
		li		$t2, 0xFFFF0000
		and 	$a0, $a0, $t2				
		jal		rever
		move	$a0, $v0
		la		$t1, pbps
		sw		$a0, 0x0($t1)			#pbps = $a0
		
		#sector per cluster(pspc)
		lw		$t1, 0x6($t0)
		move	$a0, $t1
		srl		$a0, $a0, 16
		andi	$a0, $a0, 0x0F
		la		$t1, pspc
		sw		$a0, 0x0($t1)		#pspc
		
		#reserved sector(prs)
		lw		$t1, 0x7($t0)
		move	$a0, $t1
		jal		rever
		andi	$a0, $v0, 0xFF
		la		$t1, prs
		sw		$a0, 0x0($t1)		#prs
		
		#number of fat
		lw		$t1, 0x8($t0)
		move	$a0, $t1
		jal		rever
		andi	$a0, $v0, 0xFF
		la		$t1, nof
		sw		$a0, 0x0($t1)		#nof
				
		
		#sector per fat
		lw		$t1, 0xb($t0)		
		move	$a0, $t1
		jal		rever
		andi	$a0, $v0, 0xFF
		la		$t1, pspf
		sw		$a0, 0x0($t1)		#pspf

		#hidden sector
		lw		$t1, 0xe($t0)
		move	$a0, $t1
		jal		rever
		move	$a0, $v0
				
		la		$t0, psec
		lw		$t1, 0x0($t0)		#$t1=psec
		la		$t0, prs
		lw		$t2, 0x0($t0)		#$t2=prs
		la		$t0, nof
		lw		$t3, 0x0($t0)		#$t3=nof
		la		$t0, pspf
		lw		$t4, 0x0($t0)		#$t4=pspf
		
		#load FAT sector
		add		$t0, $t1, $t2		#$a0=psec+prs FAT = psec+prs
		move	$a0, $t0
		sw		$a0, 0x50FC($zero)
		addi	$s0, $zero, 2
		sh		$s0, 0x50FE($zero)
SUS3:	lh		$s0, 0x50FF($zero)
		beq		$s0, $zero,SUS3
		li		$a0, 0x3D00
		jal 	mosec				#move fat sector to 0x3D00
		
		mul		$t3, $t3, $t4
		add		$t0, $t0, $t3
		move	$a0, $t0			#$a0=psec+prs+nof*pspf
		
		#load DIR sector
		sw		$a0, 0x50FC($zero)
		addi	$s0, $zero, 2
		sh		$s0, 0x50FE($zero)
SUS4:	lh		$s0, 0x50FF($zero)
		beq		$s0, $zero, SUS4
			
		
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$ra
		pop		$t0
		pop		$v0
		pop		$v1
		pop		$a2
		pop		$a1
		pop		$a0
		pop		$s0		
		jr		$ra

#reverse the little-endian data
rever:	push	$a0
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$ra
		
		andi	$t0, $a0, 0xFF
		srl		$t1, $a0, 8
		andi	$t1, $t1, 0xFF
		srl		$t2, $a0, 16
		andi	$t2, $t2, 0xFF
		srl		$t3, $a0, 24
		andi 	$t3, $t3, 0xFF
		sll		$v0, $t0, 24
		sll		$t1, $t1, 16
		sll		$t2, $t2, 8
		add		$v0, $v0, $t1
		add		$v0, $v0, $t2
		add		$v0, $v0, $t3
		
		pop		$ra
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop		$a0
		jr		$ra
		
psec:	.2byte	0x0
plen:	.2byte	0x0
pbps:	.2byte	0x0
pspc:	.2byte	0x0
prs:	.2byte	0x0
nof:	.2byte	0x0
pspf:	.2byte	0x0

#move sector
mosec:	push	$a0
		push	$t0
		push	$t1
		push	$t2
		push	$t3
		push	$t4
		push	$ra
		
		li 		$t0, 0x5100
		move	$t1, $a0
		li		$t2, 0x100
		move	$t3, $zero

mv:		lw		$t4, 0($t0)		# for (i=0; i<100; i++)
		sw		$t4, 0($t1)		#	s[$t1]=s[$t0]
		addi	$t0, $t0, 1
		addi	$t1, $t1, 1
		addi	$t2, $t2, -1
		bne		$t2, $zero, mv
		
		pop		$ra
		pop		$t4
		pop		$t3
		pop		$t2
		pop		$t1
		pop		$t0
		pop 	$a0
		
		jr		$ra